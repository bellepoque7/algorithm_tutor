''' 틀림, 예제는 출력됨 (반례 찾아야함)'''

import sys
from itertools import*
from collections import deque
sys.setrecursionlimit(10**6)

dr = [-1,1,0,0]
dc = [0,0,-1,1]

def bfs(idx,x,y):
    Q = deque([(x,y)])
    visited = [[0]*N for _ in range(M)]
    visited[x][y] = 1
    
    while len(Q)>0:
        x,y = Q.popleft()
        
        for i in range(4):
            nr = x + dr[i]
            nc = y + dc[i]
            if nr<0 or nr>=M or nc<0 or nc>=N or a[nr][nc]=='#' or visited[nr][nc]!=0:
                continue
            if a[nr][nc] == 'S' or a[nr][nc] == 'X' or a[nr][nc] == 'E':
                distance[idx][check.index((nr,nc))] = visited[x][y]
                
            visited[nr][nc] = visited[x][y] + 1
            Q.append((nr,nc))
        
N, M = map(int,input().split())
a = [list(input()) for _ in range(M)]

# print(a)
# print(visited)

check = []
for i in range(M):
    for j in range(N):
        if a[i][j] == 'S':
            check.append((i,j))
        if a[i][j] == 'X':
            check.append((i,j))
        if a[i][j] == 'E':
            check.append((i,j))
# print(check)
distance = [[0]*len(check) for _ in range(len(check))]
for idx,v in enumerate(check):
    # print(idx,v) 
    bfs(idx,v[0],v[1])
# print(distance)
index_check = []
for i in range(1,len(check)-1):
    index_check.append(i)
# print(index_check)
res = 1e9
for permu in permutations(index_check):
    new = [0] + list(permu) + [len(check)-1]
    # print(new)
    temp = 0
    for idx in range(1,len(new)):
        temp += distance[new[idx]][new[idx-1]]
    res = min(res, temp)
print(res)
